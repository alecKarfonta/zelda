Type: debugging_help
Quality Score: 8.5
Validation Notes: 
--------------------------------------------------
Instruction: My custom actor crashes when loading into Hyrule Field. The actor loads fine in other areas but consistently crashes here. How can I debug this?",
    
    "input": "Actor_Init() {
  this->objBankIndex = Object_GetIndex(&globalCtx, OBJECT_CUSTOM);
  Actor_SetScale(&this->actor, 0.01f);
  this->actionFunc = Actor_Wait;
}",
    
    "output": "This is likely an object dependency issue that's specific to Hyrule Field. Here's how to diagnose and fix it:

1. First, verify the crash in debug ROM and check the object load status:
   - Enable the debug menu with (L + R + Z)
   - Watch address 0x801C84B0 which shows current object loads
   - If objBankIndex returns -1, the object failed to load

2. Common causes:
   - Hyrule Field has high memory usage and limited slots for dynamic objects
   - Object_GetIndex() may fail if dependencies aren't properly set
   - The object bank might be getting unloaded between scene transitions

3. Solutions:
   a) Add explicit object dependency in scene file:
      ```c
      // Add to object list in scene header
      {OBJECT_CUSTOM, 0x00}
      ```
   
   b) Modify actor init to handle failed object loads:
      ```c
      Actor_Init() {
        this->objBankIndex = Object_GetIndex(&globalCtx, OBJECT_CUSTOM);
        if (this->objBankIndex < 0) {
          Actor_Kill(&this->actor);
          return;
        }
        Actor_SetScale(&this->actor, 0.01f);
        this->actionFunc = Actor_Wait;
      }
      ```

4. For testing:
   - Use debug ROM's object viewer (START + L)
   - Monitor heap allocation at 0x80127C40
   - Check if crash persists with minimal objects loaded",

    "technical_notes": "Object loading issues are common in Hyrule Field due to its 0x0600 scene setup and limited object slots (max 32). The debug addresses provided are for debug ROM v1.0. Solution uses standard OoT actor initialization patterns and proper error handling consistent with vanilla game code.
Input: Actor_Init() {
  this->objBankIndex = Object_GetIndex(&globalCtx, OBJECT_CUSTOM);
  Actor_SetScale(&this->actor, 0.01f);
  this->actionFunc = Actor_Wait;
}",
    
    "output": "This is likely an object dependency issue that's specific to Hyrule Field. Here's how to diagnose and fix it:

1. First, verify the crash in debug ROM and check the object load status:
   - Enable the debug menu with (L + R + Z)
   - Watch address 0x801C84B0 which shows current object loads
   - If objBankIndex returns -1, the object failed to load

2. Common causes:
   - Hyrule Field has high memory usage and limited slots for dynamic objects
   - Object_GetIndex() may fail if dependencies aren't properly set
   - The object bank might be getting unloaded between scene transitions

3. Solutions:
   a) Add explicit object dependency in scene file:
      ```c
      // Add to object list in scene header
      {OBJECT_CUSTOM, 0x00}
      ```
   
   b) Modify actor init to handle failed object loads:
      ```c
      Actor_Init() {
        this->objBankIndex = Object_GetIndex(&globalCtx, OBJECT_CUSTOM);
        if (this->objBankIndex < 0) {
          Actor_Kill(&this->actor);
          return;
        }
        Actor_SetScale(&this->actor, 0.01f);
        this->actionFunc = Actor_Wait;
      }
      ```

4. For testing:
   - Use debug ROM's object viewer (START + L)
   - Monitor heap allocation at 0x80127C40
   - Check if crash persists with minimal objects loaded",

    "technical_notes": "Object loading issues are common in Hyrule Field due to its 0x0600 scene setup and limited object slots (max 32). The debug addresses provided are for debug ROM v1.0. Solution uses standard OoT actor initialization patterns and proper error handling consistent with vanilla game code.
Output:
This is likely an object dependency issue that's specific to Hyrule Field. Here's how to diagnose and fix it:

1. First, verify the crash in debug ROM and check the object load status:
   - Enable the debug menu with (L + R + Z)
   - Watch address 0x801C84B0 which shows current object loads
   - If objBankIndex returns -1, the object failed to load

2. Common causes:
   - Hyrule Field has high memory usage and limited slots for dynamic objects
   - Object_GetIndex() may fail if dependencies aren't properly set
   - The object bank might be getting unloaded between scene transitions

3. Solutions:
   a) Add explicit object dependency in scene file:
      ```c
      // Add to object list in scene header
      {OBJECT_CUSTOM, 0x00}
      ```
   
   b) Modify actor init to handle failed object loads:
      ```c
      Actor_Init() {
        this->objBankIndex = Object_GetIndex(&globalCtx, OBJECT_CUSTOM);
        if (this->objBankIndex < 0) {
          Actor_Kill(&this->actor);
          return;
        }
        Actor_SetScale(&this->actor, 0.01f);
        this->actionFunc = Actor_Wait;
      }
      ```

4. For testing:
   - Use debug ROM's object viewer (START + L)
   - Monitor heap allocation at 0x80127C40
   - Check if crash persists with minimal objects loaded",

    "technical_notes": "Object loading issues are common in Hyrule Field due to its 0x0600 scene setup and limited object slots (max 32). The debug addresses provided are for debug ROM v1.0. Solution uses standard OoT actor initialization patterns and proper error handling consistent with vanilla game code.
