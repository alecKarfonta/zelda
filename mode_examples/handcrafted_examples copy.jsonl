{"instruction": "Skip the intro video and start directly in the Deku Tree when starting a new game", "output": "{\n  \"instruction\": \"Skip the intro video and start directly in the Deku Tree when starting a new game\",\n  \"input\": null,\n  \"output\": \"To skip the intro video and start directly in the Deku Tree, modify these files:\\n\\n**File: `oot/src/overlays/gamestates/ovl_file_choose/z_file_choose.c`**\\n- Line ~1890: Change `gSaveContext.respawn[RESPAWN_MODE_DOWN].entranceIndex = ENTR_LOAD_OPENING;` to `gSaveContext.respawn[RESPAWN_MODE_DOWN].entranceIndex = ENTR_DEKU_TREE_0;`\\n- Add these lines after the entrance index change:\\n  ```c\\n  gSaveContext.save.entranceIndex = ENTR_DEKU_TREE_0;\\n  gSaveContext.save.cutsceneIndex = CS_INDEX_NONE;\\n  gSaveContext.save.linkAge = LINK_AGE_CHILD;\\n  ```\\n\\n**File: `oot/src/code/z_play.c`**\\n- Line ~295: Replace the opening sequence check with:\\n  ```c\\n  if (gSaveContext.save.entranceIndex == ENTR_LOAD_OPENING) {\\n      // Skip the opening sequence and go directly to the Deku Tree\\n      gSaveContext.save.entranceIndex = ENTR_DEKU_TREE_0;\\n      gSaveContext.save.linkAge = LINK_AGE_CHILD;\\n      gSaveContext.save.cutsceneIndex = CS_INDEX_NONE;\\n      gSaveContext.sceneLayer = SCENE_LAYER_CHILD_DAY;\\n  }\\n  ```\\n\\n**Key Changes:**\\n- `ENTR_LOAD_OPENING` (-1) → `ENTR_DEKU_TREE_0` (0)\\n- Set `cutsceneIndex` to `CS_INDEX_NONE` to skip cutscenes\\n- Set `linkAge` to `LINK_AGE_CHILD` for proper character state\\n- Set `sceneLayer` to `SCENE_LAYER_CHILD_DAY` for correct time of day\\n\\nThis modification bypasses the entire opening sequence and places the player directly in the Deku Tree as child Link, ready to begin gameplay immediately.\"}"}
{"instruction": "Modify the Nintendo logo texture to display custom text instead of 'Nintendo'", "output": "{\n  \"instruction\": \"Modify the Nintendo logo texture to display custom text instead of 'Nintendo'\",\n  \"input\": null,\n  \"output\": \"To modify the Nintendo logo texture in the intro sequence, follow these steps:\\n\\n**File: `oot/extracted/ntsc-1.2/assets/textures/nintendo_rogo_static/nintendo_rogo_static_Tex_000000.i8.png`**\\n- Edit the PNG file using an image editor (GIMP, Photoshop, etc.)\\n- Replace the 'Nintendo' text with your custom text (e.g., 'Test')\\n- Maintain the same image dimensions and format\\n- Save the modified PNG file\\n\\n**Rebuild Process:**\\n1. Run the build tool manually to convert the modified PNG:\\n   ```bash\\n   tools/assets/build_from_png/build_from_png extracted/ntsc-1.2/assets/textures/nintendo_rogo_static/nintendo_rogo_static_Tex_000000.i8.png build/ntsc-1.2/assets/textures/nintendo_rogo_static/ extracted/ntsc-1.2/assets/textures/nintendo_rogo_static/\\n   ```\\n\\n2. Force rebuild by touching the source file:\\n   ```bash\\n   touch extracted/ntsc-1.2/assets/textures/nintendo_rogo_static/nintendo_rogo_static_Tex_000000.i8.png\\n   make build/ntsc-1.2/assets/textures/nintendo_rogo_static/nintendo_rogo_static_Tex_000000.i8.inc.c VERSION=ntsc-1.2\\n   ```\\n\\n3. Build the full ROM:\\n   ```bash\\n   make VERSION=ntsc-1.2 ENG=1 -j4\\n   ```\\n\\n**Key Points:**\\n- The PNG file must have the correct format suffix (`.i8.png`)\\n- The build tool converts PNG to C header files (`.inc.c`)\\n- The modified texture appears in the intro sequence\\n- The ROM will have a different MD5 checksum (expected for modified assets)\\n\\nThis process allows you to customize the Nintendo logo that appears during the game's intro sequence.\"}"}
{"instruction": "Change adult Link's tunic color from green to red", "output": "{\n  \"instruction\": \"Change adult Link's tunic color from green to red\",\n  \"input\": null,\n  \"output\": \"To change adult Link's tunic color from green to red, modify this file:\\n\\n**File: `oot/src/code/z_player_lib.c`**\\n- Line 1070: Change `{ 128, 0, 128 }, // PLAYER_TUNIC_KOKIRI` to `{ 255, 0, 0 }, // PLAYER_TUNIC_KOKIRI`\\n\\n**Complete code change:**\\n```c\\nColor_RGB8 sTunicColors[PLAYER_TUNIC_MAX] = {\\n    { 255, 0, 0 },   // PLAYER_TUNIC_KOKIRI (red)\\n    { 100, 20, 0 },  // PLAYER_TUNIC_GORON\\n    { 0, 60, 100 },  // PLAYER_TUNIC_ZORA\\n};\\n```\\n\\n**Explanation:**\\n- The `sTunicColors` array controls the RGB color values for all of Link's tunics\\n- `PLAYER_TUNIC_KOKIRI` is the default green tunic worn by both child and adult Link\\n- RGB values `255, 0, 0` create a bright red color\\n- This modification affects both child and adult Link forms\\n\\n**Rebuild Process:**\\n```bash\\nmake VERSION=ntsc-1.2 ENG=1 -j4\\n```\\n\\n**Other color examples:**\\n- Blue: `{ 0, 0, 255 }`\\n- Yellow: `{ 255, 255, 0 }`\\n- White: `{ 255, 255, 255 }`\\n- Black: `{ 0, 0, 0 }`\\n\\nThis is the definitive method for changing Link's tunic colors in the decompiled Ocarina of Time source code.\"}"}
{"instruction": "Change Link's gauntlet colors from white to gold", "output": "{\n  \"instruction\": \"Change Link's gauntlet colors from white to gold\",\n  \"input\": null,\n  \"output\": \"To change Link's gauntlet colors from white to gold, modify this file:\\n\\n**File: `oot/src/code/z_player_lib.c`**\\n- Line 1076: Change `{ 255, 255, 255 },` to `{ 255, 215, 0 },`\\n\\n**Complete code change:**\\n```c\\nColor_RGB8 sGauntletColors[] = {\\n    { 255, 215, 0 },  // Default gauntlets (gold)\\n    { 254, 207, 15 }, // Silver Gauntlets (unchanged)\\n};\\n```\\n\\n**Explanation:**\\n- The `sGauntletColors` array controls the RGB color values for Link's gauntlets\\n- Index 0 is the default gauntlet color (normally white)\\n- Index 1 is the Silver Gauntlets color (yellow-gold)\\n- RGB values `255, 215, 0` create a gold color\\n- This affects adult Link's gauntlets when equipped\\n\\n**Rebuild Process:**\\n```bash\\nmake VERSION=ntsc-1.2 ENG=1 -j4\\n```\\n\\n**Other gauntlet color examples:**\\n- Silver: `{ 192, 192, 192 }`\\n- Bronze: `{ 205, 127, 50 }`\\n- Red: `{ 255, 0, 0 }`\\n- Blue: `{ 0, 100, 255 }`\\n\\n**Note:** The Silver Gauntlets have their own dedicated color slot and can be modified independently of the default gauntlets.\"}"}
{"instruction": "Make all of Link's tunics the same bright blue color", "output": "{\n  \"instruction\": \"Make all of Link's tunics the same bright blue color\",\n  \"input\": null,\n  \"output\": \"To make all of Link's tunics bright blue, modify this file:\\n\\n**File: `oot/src/code/z_player_lib.c`**\\n- Lines 1070-1072: Change all tunic color values to blue\\n\\n**Complete code change:**\\n```c\\nColor_RGB8 sTunicColors[PLAYER_TUNIC_MAX] = {\\n    { 0, 150, 255 }, // PLAYER_TUNIC_KOKIRI (bright blue)\\n    { 0, 150, 255 }, // PLAYER_TUNIC_GORON (bright blue)\\n    { 0, 150, 255 }, // PLAYER_TUNIC_ZORA (bright blue)\\n};\\n```\\n\\n**Explanation:**\\n- This modification makes all three tunics the same bright blue color\\n- `PLAYER_TUNIC_KOKIRI` - Default green tunic → bright blue\\n- `PLAYER_TUNIC_GORON` - Fire-resistant red tunic → bright blue\\n- `PLAYER_TUNIC_ZORA` - Water-breathing blue tunic → bright blue\\n- RGB values `0, 150, 255` create a bright sky blue color\\n- All special properties (fire resistance, water breathing) remain intact\\n\\n**Rebuild Process:**\\n```bash\\nmake VERSION=ntsc-1.2 ENG=1 -j4\\n```\\n\\n**Alternative blue shades:**\\n- Navy blue: `{ 0, 0, 128 }`\\n- Royal blue: `{ 65, 105, 225 }`\\n- Light blue: `{ 173, 216, 230 }`\\n- Cyan: `{ 0, 255, 255 }`\\n\\nThis creates a uniform color scheme where all tunics share the same visual appearance while maintaining their unique gameplay functions.\"}"}
{"instruction": "Create rainbow-colored gauntlets that cycle through colors", "output": "{\n  \"instruction\": \"Create rainbow-colored gauntlets that cycle through colors\",\n  \"input\": null,\n  \"output\": \"To create rainbow-colored gauntlets, you need to modify both the color array and add dynamic color cycling. This requires changes to multiple files:\\n\\n**File: `oot/src/code/z_player_lib.c`**\\n\\nFirst, expand the gauntlet colors array:\\n```c\\nColor_RGB8 sGauntletColors[] = {\\n    { 255, 0, 0 },   // Red\\n    { 255, 165, 0 }, // Orange\\n    { 255, 255, 0 }, // Yellow\\n    { 0, 255, 0 },   // Green\\n    { 0, 0, 255 },   // Blue\\n    { 75, 0, 130 },  // Indigo\\n    { 148, 0, 211 }, // Violet\\n    { 254, 207, 15 }, // Silver Gauntlets (unchanged)\\n};\\n```\\n\\nAdd a color cycling function:\\n```c\\nstatic u8 sGauntletColorIndex = 0;\\nstatic s16 sGauntletColorTimer = 0;\\n\\nvoid Player_UpdateGauntletColors(void) {\\n    sGauntletColorTimer++;\\n    if (sGauntletColorTimer >= 10) { // Change color every 10 frames\\n        sGauntletColorIndex = (sGauntletColorIndex + 1) % 7; // Cycle through 7 rainbow colors\\n        sGauntletColorTimer = 0;\\n    }\\n}\\n\\nColor_RGB8* Player_GetCurrentGauntletColor(s32 gauntletType) {\\n    if (gauntletType == PLAYER_GAUNTLETS_SILVER) {\\n        return &sGauntletColors[7]; // Silver gauntlets use fixed color\\n    }\\n    return &sGauntletColors[sGauntletColorIndex]; // Use cycling rainbow color\\n}\\n```\\n\\n**Usage in player update function:**\\nAdd this call in the player's update function:\\n```c\\nPlayer_UpdateGauntletColors();\\n```\\n\\n**Rebuild Process:**\\n```bash\\nmake VERSION=ntsc-1.2 ENG=1 -j4\\n```\\n\\n**Explanation:**\\n- Creates 7 rainbow colors in the gauntlet array\\n- Adds a timer that cycles through colors every 10 frames (6 times per second)\\n- Silver Gauntlets maintain their original color\\n- Default gauntlets cycle through the rainbow spectrum\\n- The effect is visible during gameplay when gauntlets are equipped\\n\\n**Customization options:**\\n- Change timer value to speed up/slow down color cycling\\n- Modify RGB values for different color schemes\\n- Add more colors to the array for smoother transitions\\n\\nThis creates a dynamic visual effect where Link's gauntlets continuously cycle through rainbow colors during gameplay.\"}"}
{"instruction": "Make adult Link move faster by increasing his movement speed", "output": "{\n  \"instruction\": \"Make adult Link move faster by increasing his movement speed\",\n  \"input\": null,\n  \"output\": \"To make adult Link move faster, modify this file:\\n\\n**File: `oot/src/code/z_player_lib.c`**\\n- Line 39: Change `600,` to `800,` in the PLAYER_BOOTS_KOKIRI section\\n\\n**Complete code change:**\\n```c\\n// PLAYER_BOOTS_KOKIRI\\n{\\n    200,                         // REG(19)\\n    FRAMERATE_CONST(1000, 1200), // REG(30)\\n    FRAMERATE_CONST(300, 360),   // REG(32)\\n    700,                         // REG(34)\\n    FRAMERATE_CONST(550, 660),   // REG(35)\\n    FRAMERATE_CONST(270, 324),   // REG(36)\\n    800,                         // REG(37)\\n    FRAMERATE_CONST(350, 420),   // REG(38)\\n    800,                         // R_DECELERATE_RATE\\n    800,                         // R_RUN_SPEED_LIMIT (increased from 600)\\n    -100,                        // REG(68)\\n    600,                         // REG(69)\\n    590,                         // IREG(66)\\n    750,                         // IREG(67)\\n    125,                         // IREG(68)\\n    200,                         // IREG(69)\\n    FRAMERATE_CONST(130, 156),   // MREG(95)\\n},\\n```\\n\\n**Explanation:**\\n- `R_RUN_SPEED_LIMIT` controls adult Link's maximum movement speed\\n- Original value: 600 units/frame\\n- Modified value: 800 units/frame (33% faster)\\n- This only affects adult Link, child Link remains at normal speed (550)\\n- The change is immediately noticeable during gameplay\\n\\n**Rebuild Process:**\\n```bash\\nmake VERSION=ntsc-1.2 ENG=1 -j4\\n```\\n\\n**Speed comparison:**\\n- Child Link: 550 units/frame (unchanged)\\n- Adult Link: 600 → 800 units/frame (33% increase)\\n\\n**Other speed values:**\\n- Very fast: 1000 units/frame\\n- Super fast: 1200 units/frame\\n- Moderate increase: 700 units/frame\\n\\nThis modification makes adult Link noticeably faster while keeping child Link at the original speed.\"}"}
{"instruction": "Make child Link move faster by increasing his movement speed", "output": "{\n  \"instruction\": \"Make child Link move faster by increasing his movement speed\",\n  \"input\": null,\n  \"output\": \"To make child Link move faster, modify this file:\\n\\n**File: `oot/src/code/z_player_lib.c`**\\n- Line 142: Change `550,` to `750,` in the PLAYER_BOOTS_KOKIRI_CHILD section\\n\\n**Complete code change:**\\n```c\\n// PLAYER_BOOTS_KOKIRI_CHILD\\n{\\n    200,                         // REG(19)\\n    FRAMERATE_CONST(1000, 1200), // REG(30)\\n    FRAMERATE_CONST(300, 360),   // REG(32)\\n    800,                         // REG(34)\\n    FRAMERATE_CONST(500, 600),   // REG(35)\\n    FRAMERATE_CONST(400, 480),   // REG(36)\\n    800,                         // REG(37)\\n    FRAMERATE_CONST(400, 480),   // REG(38)\\n    800,                         // R_DECELERATE_RATE\\n    750,                         // R_RUN_SPEED_LIMIT (increased from 550)\\n    -100,                        // REG(68)\\n    600,                         // REG(69)\\n    540,                         // IREG(66)\\n    750,                         // IREG(67)\\n    125,                         // IREG(68)\\n    400,                         // IREG(69)\\n    FRAMERATE_CONST(200, 240),   // MREG(95)\\n},\\n```\\n\\n**Explanation:**\\n- `R_RUN_SPEED_LIMIT` controls child Link's maximum movement speed\\n- Original value: 550 units/frame\\n- Modified value: 750 units/frame (36% faster)\\n- This only affects child Link, adult Link remains at normal speed (600)\\n- The change is immediately noticeable during child Link gameplay\\n\\n**Rebuild Process:**\\n```bash\\nmake VERSION=ntsc-1.2 ENG=1 -j4\\n```\\n\\n**Speed comparison:**\\n- Child Link: 550 → 750 units/frame (36% increase)\\n- Adult Link: 600 units/frame (unchanged)\\n\\n**Other speed values:**\\n- Very fast: 900 units/frame\\n- Super fast: 1100 units/frame\\n- Moderate increase: 650 units/frame\\n\\nThis modification makes child Link noticeably faster while keeping adult Link at the original speed.\"}"}
{"instruction": "Make both child and adult Link move faster by increasing their movement speeds", "output": "{\n  \"instruction\": \"Make both child and adult Link move faster by increasing their movement speeds\",\n  \"input\": null,\n  \"output\": \"To make both child and adult Link move faster, modify this file:\\n\\n**File: `oot/src/code/z_player_lib.c`**\\n- Line 39: Change `600,` to `800,` in the PLAYER_BOOTS_KOKIRI section (adult)\\n- Line 142: Change `550,` to `700,` in the PLAYER_BOOTS_KOKIRI_CHILD section (child)\\n\\n**Complete code change:**\\n```c\\n// PLAYER_BOOTS_KOKIRI (Adult Link)\\n{\\n    200,                         // REG(19)\\n    FRAMERATE_CONST(1000, 1200), // REG(30)\\n    FRAMERATE_CONST(300, 360),   // REG(32)\\n    700,                         // REG(34)\\n    FRAMERATE_CONST(550, 660),   // REG(35)\\n    FRAMERATE_CONST(270, 324),   // REG(36)\\n    800,                         // REG(37)\\n    FRAMERATE_CONST(350, 420),   // REG(38)\\n    800,                         // R_DECELERATE_RATE\\n    800,                         // R_RUN_SPEED_LIMIT (increased from 600)\\n    -100,                        // REG(68)\\n    600,                         // REG(69)\\n    590,                         // IREG(66)\\n    750,                         // IREG(67)\\n    125,                         // IREG(68)\\n    200,                         // IREG(69)\\n    FRAMERATE_CONST(130, 156),   // MREG(95)\\n},\\n// PLAYER_BOOTS_KOKIRI_CHILD (Child Link)\\n{\\n    200,                         // REG(19)\\n    FRAMERATE_CONST(1000, 1200), // REG(30)\\n    FRAMERATE_CONST(300, 360),   // REG(32)\\n    800,                         // REG(34)\\n    FRAMERATE_CONST(500, 600),   // REG(35)\\n    FRAMERATE_CONST(400, 480),   // REG(36)\\n    800,                         // REG(37)\\n    FRAMERATE_CONST(400, 480),   // REG(38)\\n    800,                         // R_DECELERATE_RATE\\n    700,                         // R_RUN_SPEED_LIMIT (increased from 550)\\n    -100,                        // REG(68)\\n    600,                         // REG(69)\\n    540,                         // IREG(66)\\n    750,                         // IREG(67)\\n    125,                         // IREG(68)\\n    400,                         // IREG(69)\\n    FRAMERATE_CONST(200, 240),   // MREG(95)\\n},\\n```\\n\\n**Explanation:**\\n- Adult Link: `R_RUN_SPEED_LIMIT` 600 → 800 (33% faster)\\n- Child Link: `R_RUN_SPEED_LIMIT` 550 → 700 (27% faster)\\n- Both forms of Link are now faster than the original game\\n- The changes are immediately noticeable during gameplay\\n\\n**Rebuild Process:**\\n```bash\\nmake VERSION=ntsc-1.2 ENG=1 -j4\\n```\\n\\n**Speed comparison:**\\n- Child Link: 550 → 700 units/frame (27% increase)\\n- Adult Link: 600 → 800 units/frame (33% increase)\\n\\n**Other speed combinations:**\\n- Both super fast: Adult 1000, Child 900\\n- Moderate increase: Adult 700, Child 650\\n- Equal speeds: Both 750 units/frame\\n\\nThis modification makes both child and adult Link faster, improving overall game pacing.\"}"}
{"instruction": "Make adult Link move slower by decreasing his movement speed", "output": "{\n  \"instruction\": \"Make adult Link move slower by decreasing his movement speed\",\n  \"input\": null,\n  \"output\": \"To make adult Link move slower, modify this file:\\n\\n**File: `oot/src/code/z_player_lib.c`**\\n- Line 39: Change `600,` to `400,` in the PLAYER_BOOTS_KOKIRI section\\n\\n**Complete code change:**\\n```c\\n// PLAYER_BOOTS_KOKIRI\\n{\\n    200,                         // REG(19)\\n    FRAMERATE_CONST(1000, 1200), // REG(30)\\n    FRAMERATE_CONST(300, 360),   // REG(32)\\n    700,                         // REG(34)\\n    FRAMERATE_CONST(550, 660),   // REG(35)\\n    FRAMERATE_CONST(270, 324),   // REG(36)\\n    800,                         // REG(37)\\n    FRAMERATE_CONST(350, 420),   // REG(38)\\n    800,                         // R_DECELERATE_RATE\\n    400,                         // R_RUN_SPEED_LIMIT (decreased from 600)\\n    -100,                        // REG(68)\\n    600,                         // REG(69)\\n    590,                         // IREG(66)\\n    750,                         // IREG(67)\\n    125,                         // IREG(68)\\n    200,                         // IREG(69)\\n    FRAMERATE_CONST(130, 156),   // MREG(95)\\n},\\n```\\n\\n**Explanation:**\\n- `R_RUN_SPEED_LIMIT` controls adult Link's maximum movement speed\\n- Original value: 600 units/frame\\n- Modified value: 400 units/frame (33% slower)\\n- This only affects adult Link, child Link remains at normal speed (550)\\n- The change creates a more deliberate, slower-paced adult Link\\n\\n**Rebuild Process:**\\n```bash\\nmake VERSION=ntsc-1.2 ENG=1 -j4\\n```\\n\\n**Speed comparison:**\\n- Child Link: 550 units/frame (unchanged)\\n- Adult Link: 600 → 400 units/frame (33% decrease)\\n\\n**Other slow speed values:**\\n- Very slow: 300 units/frame\\n- Extremely slow: 200 units/frame\\n- Slightly slower: 500 units/frame\\n\\nThis modification makes adult Link move more slowly, creating a different gameplay experience.\"}"}
{"instruction": "Make Iron Boots allow Link to move faster underwater instead of slower", "output": "{\n  \"instruction\": \"Make Iron Boots allow Link to move faster underwater instead of slower\",\n  \"input\": null,\n  \"output\": \"To make Iron Boots allow faster underwater movement, modify this file:\\n\\n**File: `oot/src/code/z_player_lib.c`**\\n- Line 95: Modify the PLAYER_BOOTS_IRON_UNDERWATER section\\n\\n**Complete code change:**\\n```c\\n// PLAYER_BOOTS_IRON_UNDERWATER\\n{\\n    200,                       // REG(19) - Increased from 80 for faster movement\\n    FRAMERATE_CONST(1000, 1200), // REG(30) - Increased from 800 for faster animation\\n    FRAMERATE_CONST(300, 360), // REG(32) - Increased from 150 for faster turns\\n    700,                       // REG(34) - Jump distance (unchanged)\\n    FRAMERATE_CONST(600, 720), // REG(35) - Increased from 480 for faster walking\\n    FRAMERATE_CONST(270, 324), // REG(36) - Increased from 270 for faster running\\n    600,                       // REG(37) - Standard movement\\n    FRAMERATE_CONST(100, 120), // REG(38) - Increased from 50 for faster animation\\n    800,                       // R_DECELERATE_RATE - Deceleration\\n    800,                       // R_RUN_SPEED_LIMIT - Increased from 550 for faster max speed\\n    -40,                       // REG(68) - Reduced gravity (unchanged)\\n    600,                       // REG(69) - Increased friction from 400\\n    540,                       // IREG(66) - Standard physics\\n    270,                       // IREG(67) - Standard physics\\n    25,                        // IREG(68) - Standard physics\\n    0,                         // IREG(69) - No additional physics\\n    FRAMERATE_CONST(130, 156), // MREG(95) - Increased from 80 for faster timing\\n},\\n```\\n\\n**Explanation:**\\n- `REG(19)` increased from 80 to 200 for faster basic movement\\n- `REG(30)` increased from 800 to 1000 for faster animation timing\\n- `REG(32)` increased from 150 to 300 for faster turning\\n- `REG(35)` increased from 480 to 600 for faster walking\\n- `R_RUN_SPEED_LIMIT` increased from 550 to 800 for much faster max speed\\n- `REG(69)` increased from 400 to 600 for better underwater control\\n- `MREG(95)` increased from 80 to 130 for improved responsiveness\\n\\n**Rebuild Process:**\\n```bash\\nmake VERSION=ntsc-1.2 ENG=1 -j4\\n```\\n\\n**Speed comparison:**\\n- Original Iron Boots underwater: 550 units/frame\\n- Modified Iron Boots underwater: 800 units/frame (45% faster)\\n- Now faster than normal land movement (600 units/frame)\\n\\nThis modification makes Iron Boots advantageous underwater, allowing Link to move faster than normal rather than being slowed down.\"}"}
{"instruction": "Make Hover Boots allow Link to float higher and longer", "output": "{\n  \"instruction\": \"Make Hover Boots allow Link to float higher and longer\",\n  \"input\": null,\n  \"output\": \"To make Hover Boots provide better floating abilities, modify this file:\\n\\n**File: `oot/src/code/z_player_lib.c`**\\n- Line 75: Modify the PLAYER_BOOTS_HOVER section\\n\\n**Complete code change:**\\n```c\\n// PLAYER_BOOTS_HOVER\\n{\\n    200,                         // REG(19) - Basic movement multiplier\\n    FRAMERATE_CONST(1000, 1200), // REG(30) - Animation timing\\n    FRAMERATE_CONST(300, 360),   // REG(32) - Turn speed\\n    700,                         // REG(34) - Jump distance\\n    FRAMERATE_CONST(550, 660),   // REG(35) - Walking speed\\n    FRAMERATE_CONST(270, 324),   // REG(36) - Running transition\\n    600,                         // REG(37) - Standard movement\\n    FRAMERATE_CONST(600, 720),   // REG(38) - Hover animation timing\\n    800,                         // R_DECELERATE_RATE - Deceleration\\n    550,                         // R_RUN_SPEED_LIMIT - Moderate speed\\n    -20,                         // REG(68) - Reduced gravity from -100 for higher float\\n    600,                         // REG(69) - Ground friction\\n    540,                         // IREG(66) - Hover physics parameter\\n    270,                         // IREG(67) - Hover physics parameter\\n    5,                           // IREG(68) - Reduced from 25 for longer float time\\n    0,                           // IREG(69) - No additional physics\\n    FRAMERATE_CONST(300, 360),   // MREG(95) - Increased from 130 for extended hover\\n},\\n```\\n\\n**Explanation:**\\n- `REG(68)` reduced from -100 to -20 for much less gravity (higher floating)\\n- `IREG(68)` reduced from 25 to 5 for extended hover duration\\n- `MREG(95)` increased from 130 to 300 for longer hover timing\\n- These changes allow Link to float significantly higher and for longer periods\\n- The reduced gravity makes it easier to reach higher platforms\\n- Extended hover duration allows crossing larger gaps\\n\\n**Rebuild Process:**\\n```bash\\nmake VERSION=ntsc-1.2 ENG=1 -j4\\n```\\n\\n**Hover improvements:**\\n- Gravity reduced by 80% (much higher floating)\\n- Hover duration increased by ~130%\\n- Better control for precision platforming\\n- Can reach previously inaccessible areas\\n\\n**Alternative values for different effects:**\\n- Extreme floating: `REG(68) = 0` (no gravity)\\n- Infinite hover: `IREG(68) = 0` (no time limit)\\n- Super jump: `REG(34) = 1200` (increased jump distance)\\n\\nThis modification makes Hover Boots much more useful for exploration and platforming.\"}"}
{"instruction": "Make Link's sword glow with a bright blue light effect", "output": "{\n  \"instruction\": \"Make Link's sword glow with a bright blue light effect\",\n  \"input\": null,\n  \"output\": \"To make Link's sword glow with a blue light effect, modify this file:\\n\\n**File: `oot/src/code/z_player_lib.c`**\\n\\nAdd sword glow colors after the gauntlet colors (around line 1080):\\n```c\\n// Add after sGauntletColors array\\nColor_RGB8 sSwordGlowColors[] = {\\n    { 0, 150, 255 }, // Bright blue glow for Master Sword\\n    { 100, 255, 100 }, // Green glow for Kokiri Sword\\n    { 255, 200, 0 }, // Golden glow for Biggoron's Sword\\n};\\n\\nstatic s16 sSwordGlowTimer = 0;\\n\\nvoid Player_ApplySwordGlow(PlayState* play, Player* this) {\\n    if ((this->heldItemAction == PLAYER_IA_SWORD_MASTER) || \\n        (this->heldItemAction == PLAYER_IA_SWORD_KOKIRI) ||\\n        (this->heldItemAction == PLAYER_IA_SWORD_BIGGORON)) {\\n        \\n        s32 swordIndex = (this->heldItemAction == PLAYER_IA_SWORD_BIGGORON) ? 2 : \\n                        (this->heldItemAction == PLAYER_IA_SWORD_MASTER) ? 0 : 1;\\n        \\n        // Create pulsing glow effect\\n        sSwordGlowTimer++;\\n        f32 glowIntensity = (Math_SinS(sSwordGlowTimer * 800) + 1.0f) * 0.5f;\\n        \\n        Color_RGB8* baseColor = &sSwordGlowColors[swordIndex];\\n        u8 r = (u8)(baseColor->r * (0.5f + glowIntensity * 0.5f));\\n        u8 g = (u8)(baseColor->g * (0.5f + glowIntensity * 0.5f));\\n        u8 b = (u8)(baseColor->b * (0.5f + glowIntensity * 0.5f));\\n        \\n        gDPSetEnvColor(POLY_OPA_DISP++, r, g, b, 0);\\n    }\\n}\\n```\\n\\nModify the Player_DrawImpl function around line 1721:\\n```c\\n// Add this call before SkelAnime_DrawFlexLod\\nif ((this->leftHandType == PLAYER_MODELTYPE_LH_SWORD) || \\n    (this->leftHandType == PLAYER_MODELTYPE_LH_BGS)) {\\n    Player_ApplySwordGlow(play, this);\\n}\\n```\\n\\n**Explanation:**\\n- Creates different colored glows for each sword type\\n- Master Sword: Bright blue glow\\n- Kokiri Sword: Green glow\\n- Biggoron's Sword: Golden glow\\n- Uses sine wave for pulsing glow effect\\n- Glow intensity varies from 50% to 100% brightness\\n- Applied only when sword is being held\\n\\n**Rebuild Process:**\\n```bash\\nmake VERSION=ntsc-1.2 ENG=1 -j4\\n```\\n\\n**Customization options:**\\n- Change glow speed: Modify `800` in `Math_SinS(sSwordGlowTimer * 800)`\\n- Adjust glow intensity: Change `0.5f` values for different brightness ranges\\n- Different colors: Modify RGB values in `sSwordGlowColors`\\n- Constant glow: Remove sine wave calculation for steady glow\\n\\nThis creates a dynamic glowing effect that makes Link's swords more visually striking during gameplay.\"}"}
{"instruction": "Make Link's bottle contents glow with different colors", "output": "{\n  \"instruction\": \"Make Link's bottle contents glow with different colors\",\n  \"input\": null,\n  \"output\": \"To make Link's bottle contents glow with dynamic colors, modify this file:\\n\\n**File: `oot/src/code/z_player_lib.c`**\\n\\nModify the sBottleColors array around line 2600:\\n```c\\nColor_RGB8 sBottleColors[] = {\\n    { 255, 255, 255 }, // Empty - White\\n    { 80, 80, 255 },   // Fish - Blue\\n    { 255, 100, 255 }, // Fire - Magenta\\n    { 0, 255, 0 },     // Bug - Bright green\\n    { 255, 0, 255 },   // Poe - Purple\\n    { 255, 0, 255 },   // Big Poe - Purple\\n    { 200, 200, 100 }, // Letter - Yellow\\n    { 255, 0, 0 },     // Red Potion - Red\\n    { 0, 0, 255 },     // Blue Potion - Blue\\n    { 0, 255, 0 },     // Green Potion - Green\\n    { 255, 255, 255 }, // Milk - White\\n    { 255, 255, 255 }, // Half Milk - White\\n    { 80, 80, 255 },   // Fairy - Blue\\n};\\n\\n// Add dynamic bottle glow function\\nstatic s16 sBottleGlowTimer = 0;\\n\\nvoid Player_UpdateBottleGlow(PlayState* play, Player* this) {\\n    if (this->leftHandType == PLAYER_MODELTYPE_LH_BOTTLE) {\\n        s32 bottleIndex = Player_ActionToBottle(this, this->itemAction);\\n        if (bottleIndex >= 0 && bottleIndex < 13) {\\n            sBottleGlowTimer++;\\n            \\n            Color_RGB8* baseColor = &sBottleColors[bottleIndex];\\n            \\n            // Create pulsing glow effect\\n            f32 glowIntensity = (Math_SinS(sBottleGlowTimer * 1000) + 1.0f) * 0.3f;\\n            \\n            u8 r = MIN(baseColor->r + (u8)(glowIntensity * 100), 255);\\n            u8 g = MIN(baseColor->g + (u8)(glowIntensity * 100), 255);\\n            u8 b = MIN(baseColor->b + (u8)(glowIntensity * 100), 255);\\n            \\n            gDPSetEnvColor(POLY_XLU_DISP++, r, g, b, 0);\\n        }\\n    }\\n}\\n```\\n\\nModify the bottle rendering section around line 2710:\\n```c\\n// Replace the existing bottle color application with:\\nPlayer_UpdateBottleGlow(play, this);\\ngSPDisplayList(POLY_XLU_DISP++, sBottleDLists[((void)0, gSaveContext.save.linkAge)]);\\n```\\n\\n**Explanation:**\\n- Each bottle content type has its own distinct color\\n- Pulsing glow effect using sine wave calculation\\n- Glow intensity varies dynamically (adds up to 100 RGB units)\\n- Different contents create different colored glows:\\n  - Red Potion: Bright red glow\\n  - Blue Potion: Bright blue glow\\n  - Green Potion: Bright green glow\\n  - Fairy: Pulsing blue glow\\n  - Fire: Magenta glow\\n  - Poe: Purple glow\\n\\n**Rebuild Process:**\\n```bash\\nmake VERSION=ntsc-1.2 ENG=1 -j4\\n```\\n\\n**Customization options:**\\n- Glow speed: Modify `1000` in `Math_SinS(sBottleGlowTimer * 1000)`\\n- Glow intensity: Change `100` in `glowIntensity * 100`\\n- Base colors: Modify RGB values in `sBottleColors`\\n- Glow range: Adjust `0.3f` multiplier for different glow variations\\n\\nThis creates a magical glowing effect for bottles that varies based on their contents, making them more visually appealing and easier to identify.\"}"}
{"instruction": "Make Link appear larger when wearing Iron Boots", "output": "{\n  \"instruction\": \"Make Link appear larger when wearing Iron Boots\",\n  \"input\": null,\n  \"output\": \"To make Link appear larger when wearing Iron Boots, modify this file:\\n\\n**File: `oot/src/code/z_player_lib.c`**\\n\\nModify the Player_OverrideLimbDrawGameplayCommon function around line 1250:\\n```c\\ns32 Player_OverrideLimbDrawGameplayCommon(PlayState* play, s32 limbIndex, Gfx** dList, Vec3f* pos, Vec3s* rot,\\n                                          void* thisx) {\\n    Player* this = (Player*)thisx;\\n\\n    if (limbIndex == PLAYER_LIMB_ROOT) {\\n        sLeftHandType = this->leftHandType;\\n        sRightHandType = this->rightHandType;\\n        sCurBodyPartPos = &this->bodyPartsPos[0] - 1;\\n\\n        // Add scale modification based on boots\\n        f32 scaleMultiplier = 1.0f;\\n        if (this->currentBoots == PLAYER_BOOTS_IRON) {\\n            scaleMultiplier = 1.25f; // Make Link 25% larger with Iron Boots\\n        } else if (this->currentBoots == PLAYER_BOOTS_HOVER) {\\n            scaleMultiplier = 0.95f; // Make Link 5% smaller with Hover Boots\\n        }\\n\\n        if (!LINK_IS_ADULT) {\\n            if (!(this->skelAnime.movementFlags & ANIM_FLAG_DISABLE_CHILD_ROOT_ADJUSTMENT) ||\\n                (this->skelAnime.movementFlags & ANIM_FLAG_UPDATE_XZ)) {\\n                pos->x *= 0.64f * scaleMultiplier;\\n                pos->z *= 0.64f * scaleMultiplier;\\n            }\\n\\n            if (!(this->skelAnime.movementFlags & ANIM_FLAG_DISABLE_CHILD_ROOT_ADJUSTMENT) ||\\n                (this->skelAnime.movementFlags & ANIM_FLAG_UPDATE_Y)) {\\n                pos->y *= 0.64f * scaleMultiplier;\\n            }\\n        } else {\\n            // Apply scale to adult Link\\n            pos->x *= scaleMultiplier;\\n            pos->y *= scaleMultiplier;\\n            pos->z *= scaleMultiplier;\\n        }\\n\\n        pos->y -= this->unk_6C4;\\n\\n        // Rest of existing code...\\n        if (this->unk_6C2 != 0) {\\n            Matrix_Translate(pos->x, ((Math_CosS(this->unk_6C2) - 1.0f) * 200.0f) + pos->y, pos->z, MTXMODE_APPLY);\\n            Matrix_RotateX(BINANG_TO_RAD(this->unk_6C2), MTXMODE_APPLY);\\n            Matrix_RotateZYX(rot->x, rot->y, rot->z, MTXMODE_APPLY);\\n            pos->x = pos->y = pos->z = 0.0f;\\n            rot->x = rot->y = rot->z = 0;\\n        }\\n    }\\n    // ... rest of existing function\\n}\\n```\\n\\n**Explanation:**\\n- Iron Boots make Link 25% larger (more imposing appearance)\\n- Hover Boots make Link 5% smaller (lighter, more agile appearance)\\n- Scale applies to both child and adult Link\\n- Maintains proper proportions for all body parts\\n- Visual change reflects the boots' gameplay properties\\n- Works with existing child Link scaling system\\n\\n**Rebuild Process:**\\n```bash\\nmake VERSION=ntsc-1.2 ENG=1 -j4\\n```\\n\\n**Scale comparison:**\\n- Normal Link: 100% size\\n- Iron Boots Link: 125% size (more imposing)\\n- Hover Boots Link: 95% size (more agile)\\n\\n**Alternative scale values:**\\n- Dramatic Iron Boots: `1.5f` (50% larger)\\n- Subtle Iron Boots: `1.1f` (10% larger)\\n- Tiny Hover Boots: `0.8f` (20% smaller)\\n- Giant Iron Boots: `2.0f` (100% larger)\\n\\nThis modification creates a visual representation of the boots' effects, making Iron Boots feel heavier and more powerful while Hover Boots feel lighter and more nimble.\"}"}
{"instruction": "Give Link all items and equipment by default when starting a new game", "output": "{\n  \"instruction\": \"Give Link all items and equipment by default when starting a new game\",\n  \"input\": null,\n  \"output\": \"To give Link all items and equipment by default when starting a new game, modify this file:\\n\\n**File: `oot/src/code/z_sram.c`**\\n\\nReplace the sNewSaveEquips structure around line 130:\\n```c\\nstatic ItemEquips sNewSaveEquips = {\\n    { ITEM_SWORD_MASTER, ITEM_BOW, ITEM_BOMB, ITEM_OCARINA_FAIRY }, // buttonItems - Default equipment\\n    { SLOT_BOW, SLOT_BOMB, SLOT_OCARINA },                          // cButtonSlots - C button assignments\\n    // equipment - All equipment unlocked (swords, shields, tunics, boots)\\n    (EQUIP_VALUE_SWORD_MASTER << (EQUIP_TYPE_SWORD * 4)) | (EQUIP_VALUE_SHIELD_HYLIAN << (EQUIP_TYPE_SHIELD * 4)) |\\n        (EQUIP_VALUE_TUNIC_KOKIRI << (EQUIP_TYPE_TUNIC * 4)) | (EQUIP_VALUE_BOOTS_KOKIRI << (EQUIP_TYPE_BOOTS * 4)),\\n};\\n```\\n\\nReplace the sNewSaveInventory structure:\\n```c\\nstatic Inventory sNewSaveInventory = {\\n    // items - All major items given by default\\n    {\\n        ITEM_DEKU_STICK,          // SLOT_DEKU_STICK\\n        ITEM_DEKU_NUT,            // SLOT_DEKU_NUT\\n        ITEM_BOMB,                // SLOT_BOMB\\n        ITEM_BOW,                 // SLOT_BOW\\n        ITEM_ARROW_FIRE,          // SLOT_ARROW_FIRE\\n        ITEM_DINS_FIRE,           // SLOT_DINS_FIRE\\n        ITEM_SLINGSHOT,           // SLOT_SLINGSHOT\\n        ITEM_OCARINA_FAIRY,       // SLOT_OCARINA\\n        ITEM_BOMBCHU,             // SLOT_BOMBCHU\\n        ITEM_HOOKSHOT,            // SLOT_HOOKSHOT\\n        ITEM_ARROW_ICE,           // SLOT_ARROW_ICE\\n        ITEM_FARORES_WIND,        // SLOT_FARORES_WIND\\n        ITEM_BOOMERANG,           // SLOT_BOOMERANG\\n        ITEM_LENS_OF_TRUTH,       // SLOT_LENS_OF_TRUTH\\n        ITEM_MAGIC_BEAN,          // SLOT_MAGIC_BEAN\\n        ITEM_HAMMER,              // SLOT_HAMMER\\n        ITEM_ARROW_LIGHT,         // SLOT_ARROW_LIGHT\\n        ITEM_NAYRUS_LOVE,         // SLOT_NAYRUS_LOVE\\n        ITEM_BOTTLE_EMPTY,        // SLOT_BOTTLE_1\\n        ITEM_BOTTLE_POTION_RED,   // SLOT_BOTTLE_2\\n        ITEM_BOTTLE_POTION_GREEN, // SLOT_BOTTLE_3\\n        ITEM_BOTTLE_POTION_BLUE,  // SLOT_BOTTLE_4\\n        ITEM_TRADE_ADULT,         // SLOT_TRADE_ADULT\\n        ITEM_TRADE_CHILD,         // SLOT_TRADE_CHILD\\n    },\\n    // ammo - Full ammo for all items\\n    { 30, 40, 40, 50, 200, 200, 10, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30 },\\n    // equipment - All equipment owned\\n    (EQUIP_VALUE_SWORD_KOKIRI << (EQUIP_TYPE_SWORD * 4)) | (EQUIP_VALUE_SWORD_MASTER << (EQUIP_TYPE_SWORD * 4)) |\\n        (EQUIP_VALUE_SWORD_BIGGORON << (EQUIP_TYPE_SWORD * 4)) | (EQUIP_VALUE_SHIELD_DEKU << (EQUIP_TYPE_SHIELD * 4)) |\\n        (EQUIP_VALUE_SHIELD_HYLIAN << (EQUIP_TYPE_SHIELD * 4)) | (EQUIP_VALUE_SHIELD_MIRROR << (EQUIP_TYPE_SHIELD * 4)) |\\n        (EQUIP_VALUE_TUNIC_KOKIRI << (EQUIP_TYPE_TUNIC * 4)) | (EQUIP_VALUE_TUNIC_GORON << (EQUIP_TYPE_TUNIC * 4)) |\\n        (EQUIP_VALUE_TUNIC_ZORA << (EQUIP_TYPE_TUNIC * 4)) | (EQUIP_VALUE_BOOTS_KOKIRI << (EQUIP_TYPE_BOOTS * 4)) |\\n        (EQUIP_VALUE_BOOTS_IRON << (EQUIP_TYPE_BOOTS * 4)) | (EQUIP_VALUE_BOOTS_HOVER << (EQUIP_TYPE_BOOTS * 4)),\\n    // upgrades - All upgrades unlocked\\n    (UPG_QUIVER << (UPG_QUIVER * 3)) | (UPG_BOMB_BAG << (UPG_BOMB_BAG * 3)) | (UPG_STRENGTH << (UPG_STRENGTH * 3)) |\\n        (UPG_SCALE << (UPG_SCALE * 3)) | (UPG_ADULTS_WALLET << (UPG_ADULTS_WALLET * 3)) | (UPG_SEEDS << (UPG_SEEDS * 3)) |\\n        (UPG_STICKS << (UPG_STICKS * 3)) | (UPG_NUTS << (UPG_NUTS * 3)),\\n    // questItems - All quest items obtained\\n    (QUEST_MEDALLION_FOREST << QUEST_MEDALLION_FOREST) | (QUEST_MEDALLION_FIRE << QUEST_MEDALLION_FIRE) |\\n        (QUEST_MEDALLION_WATER << QUEST_MEDALLION_WATER) | (QUEST_MEDALLION_SPIRIT << QUEST_MEDALLION_SPIRIT) |\\n        (QUEST_MEDALLION_SHADOW << QUEST_MEDALLION_SHADOW) | (QUEST_MEDALLION_LIGHT << QUEST_MEDALLION_LIGHT) |\\n        (QUEST_KOKIRI_EMERALD << QUEST_KOKIRI_EMERALD) | (QUEST_GORON_RUBY << QUEST_GORON_RUBY) |\\n        (QUEST_ZORA_SAPPHIRE << QUEST_ZORA_SAPPHIRE) | (QUEST_SONG_LULLABY << QUEST_SONG_LULLABY) |\\n        (QUEST_SONG_EPONA << QUEST_SONG_EPONA) | (QUEST_SONG_SARIA << QUEST_SONG_SARIA) |\\n        (QUEST_SONG_SUN << QUEST_SONG_SUN) | (QUEST_SONG_TIME << QUEST_SONG_TIME) |\\n        (QUEST_SONG_STORMS << QUEST_SONG_STORMS),\\n    // dungeonItems - All dungeon items\\n    { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF },\\n    // dungeonKeys - All keys\\n    { 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 },\\n    // defenseHearts - No defense hearts\\n    0,\\n    // gsTokens - No Gold Skulltula tokens\\n    0,\\n};\\n```\\n\\nUpdate the sNewSavePlayerData structure:\\n```c\\nstatic SavePlayerData sNewSavePlayerData = {\\n    { '\\\\0', '\\\\0', '\\\\0', '\\\\0', '\\\\0', '\\\\0' }, // newf\\n    0,                                      // deaths\\n    {\\n        FILENAME_SPACE,\\n        FILENAME_SPACE,\\n        FILENAME_SPACE,\\n        FILENAME_SPACE,\\n        FILENAME_SPACE,\\n        FILENAME_SPACE,\\n        FILENAME_SPACE,\\n        FILENAME_SPACE,\\n    },                  // playerName\\n    0,                  // n64ddFlag\\n    0xE0,               // healthCapacity - 14 hearts (increased from 3)\\n    0xE0,               // health - 14 hearts (increased from 3)\\n    1,                  // magicLevel - Has magic (increased from 0)\\n    MAGIC_NORMAL_METER, // magic - Full magic meter\\n    150,                // rupees - Start with some rupees\\n    8,                  // swordHealth\\n    0,                  // tatlTimer\\n    0,                  // isFirstCycle\\n};\\n```\\n\\n**Explanation:**\\n- **Equipment**: Master Sword, Hylian Shield, all tunics and boots unlocked\\n- **Items**: All major adventure items (bow, hookshot, boomerang, lens of truth, etc.)\\n- **Ammunition**: Full ammo for all items that use it\\n- **Upgrades**: All equipment upgrades (quiver, bomb bag, strength, etc.)\\n- **Quest Items**: All medallions, stones, and songs obtained\\n- **Health**: 14 hearts instead of 3\\n- **Magic**: Full magic meter enabled\\n- **Bottles**: 4 bottles with different potions\\n\\n**Rebuild Process:**\\n```bash\\nmake VERSION=ntsc-1.2 ENG=1 -j4\\n```\\n\\n**What you get when starting a new game:**\\n- All weapons and shields\\n- All tunics and boots\\n- All adventure items (hookshot, boomerang, lens, etc.)\\n- All magic spells\\n- All arrows (fire, ice, light)\\n- 4 bottles with potions\\n- All quest items and medallions\\n- 14 hearts and full magic\\n- 150 rupees to start\\n\\nThis modification transforms the new game experience into a fully equipped adventure from the start.\"}"}
{"instruction": "Make all enemies move in slow motion", "output": "{\n  \"instruction\": \"Make all enemies move in slow motion\",\n  \"input\": null,\n  \"output\": \"To make all enemies move in dramatic slow motion, modify this file:\\n\\n**File: `oot/src/code/z_actor.c`**\\n\\nReplace the Actor_UpdateVelocityXZGravity function around line 987:\\n```c\\n/**\\n * Update actor's velocity accounting for gravity (without dropping below minimum y velocity)\\n * Modified to apply dramatic slow motion effect to enemies\\n */\\nvoid Actor_UpdateVelocityXZGravity(Actor* actor) {\\n    f32 enemySpeedMultiplier = 1.0f;\\n    \\n    // Apply DRAMATIC slow motion to enemies (non-player actors)\\n    if (actor->category != ACTORCAT_PLAYER) {\\n        enemySpeedMultiplier = 0.1f; // Make enemies move at 10% speed - very dramatic!\\n    }\\n    \\n    actor->velocity.x = (actor->speed * enemySpeedMultiplier) * Math_SinS(actor->world.rot.y);\\n    actor->velocity.z = (actor->speed * enemySpeedMultiplier) * Math_CosS(actor->world.rot.y);\\n\\n    actor->velocity.y += actor->gravity;\\n\\n    if (actor->velocity.y < actor->minVelocityY) {\\n        actor->velocity.y = actor->minVelocityY;\\n    }\\n}\\n```\\n\\nReplace the Actor_UpdateVelocityXYZ function around line 1019:\\n```c\\n/**\\n * Update actor's velocity without gravity.\\n * Modified to apply dramatic slow motion effect to enemies\\n */\\nvoid Actor_UpdateVelocityXYZ(Actor* actor) {\\n    f32 enemySpeedMultiplier = 1.0f;\\n    f32 speedXZ;\\n    \\n    // Apply DRAMATIC slow motion to enemies (non-player actors)\\n    if (actor->category != ACTORCAT_PLAYER) {\\n        enemySpeedMultiplier = 0.1f; // Make enemies move at 10% speed - very dramatic!\\n    }\\n    \\n    speedXZ = (actor->speed * enemySpeedMultiplier) * Math_CosS(actor->world.rot.x);\\n\\n    actor->velocity.x = speedXZ * Math_SinS(actor->world.rot.y);\\n    actor->velocity.y = (actor->speed * enemySpeedMultiplier) * Math_SinS(actor->world.rot.x);\\n    actor->velocity.z = speedXZ * Math_CosS(actor->world.rot.y);\\n}\\n```\\n\\n**Explanation:**\\n- Modified TWO core velocity functions for dramatic slow motion effect\\n- Adds a speed multiplier of 0.1 (10%) to all non-player actors\\n- Player movement remains at normal speed\\n- Affects all enemy types including:\\n  - Walking enemies (Stalfos, Moblins, etc.)\\n  - Flying enemies (Keese, Peahats, etc.)\\n  - Bosses and mini-bosses\\n  - Moving objects and projectiles\\n- Works with both XZ movement and XYZ movement functions\\n- Variable declarations moved to top for C90 compatibility\\n\\n**Speed multiplier options:**\\n- `0.05f` = 5% speed (extremely slow)\\n- `0.1f` = 10% speed (very dramatic)\\n- `0.2f` = 20% speed (dramatic)\\n- `0.3f` = 30% speed (noticeable)\\n- `0.5f` = 50% speed (moderate)\\n\\n**Actor categories NOT affected:**\\n- `ACTORCAT_PLAYER` - Link remains at normal speed\\n- Movement affects all other categories including:\\n  - `ACTORCAT_ENEMY` - All enemies\\n  - `ACTORCAT_BOSS` - All bosses\\n  - `ACTORCAT_PROP` - Moving objects\\n  - `ACTORCAT_MISC` - Miscellaneous moving actors\\n\\n**Testing setup:**\\n- Start in Hyrule Field at nighttime to see Stalchildren\\n- Spawn location and time modified for immediate testing\\n\\n**Rebuild Process:**\\n```bash\\nmake VERSION=ntsc-1.2 REGION=US COMPARE=0 -j32\\n```\\n\\n**What you'll experience:**\\n- All enemies move at 10% speed (extremely slow)\\n- Player moves at normal speed, giving huge tactical advantage\\n- Projectiles and moving objects also dramatically slowed\\n- Animations remain smooth but very slow\\n- Combat becomes cinematic and strategic\\n\\nThis modification creates an extreme bullet-time effect where Link moves at normal speed while everything else moves in dramatic slow motion, making the effect immediately apparent and very cinematic.\"}"}