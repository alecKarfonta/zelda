{"instruction": "Create a magic spell that slows down all enemies when activated", "output": "{\n  \"instruction\": \"Create a magic spell that slows down all enemies when activated\",\n  \"input\": null,\n  \"output\": \"To create a 'Chronos Magic' spell that slows down enemies when activated (like Nayru's Love but for time manipulation), modify these files:\\n\\n**File: `oot/include/z64save.h`**\\n\\nAdd to the save context structure around line 20:\\n```c\\n// Chronos Magic spell state\\ntypedef struct {\\n    /* 0x00 */ s16 isActive;     // 1 if spell is active, 0 if not\\n    /* 0x02 */ s16 timer;        // Duration remaining in frames\\n    /* 0x04 */ s16 cooldown;     // Cooldown remaining in frames\\n} ChronosState; // size = 0x6\\n```\\n\\nAdd to SaveContext structure:\\n```c\\nChronosState chronos; // Chronos Magic state\\n```\\n\\n**File: `oot/src/code/z_parameter.c`**\\n\\nAdd Chronos Magic activation around line 350 in the magic item handling:\\n```c\\n// Add this case in the magic item switch statement\\ncase ITEM_CHRONOS_MAGIC: // You'll need to define this item ID\\n    if ((gSaveContext.save.playerData.magic >= 48) && (gSaveContext.chronos.cooldown <= 0)) {\\n        // Activate Chronos Magic\\n        gSaveContext.chronos.isActive = 1;\\n        gSaveContext.chronos.timer = 600; // 10 seconds at 60fps\\n        gSaveContext.chronos.cooldown = 1800; // 30 second cooldown\\n        \\n        // Consume magic\\n        gSaveContext.save.playerData.magic -= 48; // Same cost as Nayru's Love\\n        \\n        // Play activation sound\\n        Audio_PlaySfxGeneral(NA_SE_PL_MAGIC_WIND_NORMAL, &gSfxDefaultPos, 4, &gSfxDefaultFreqAndVolScale, &gSfxDefaultFreqAndVolScale, &gSfxDefaultReverb);\\n        \\n        // Visual effect (reuse Farore's Wind effect)\\n        Magic_Add(play, MAGIC_CONSUME_FARORES_WIND);\\n    }\\n    break;\\n```\\n\\n**File: `oot/src/code/z_play.c`**\\n\\nAdd Chronos Magic update in the main game loop around line 850:\\n```c\\n// Update Chronos Magic state\\nvoid Chronos_Update(PlayState* play) {\\n    if (gSaveContext.chronos.isActive) {\\n        gSaveContext.chronos.timer--;\\n        \\n        // Deactivate when timer expires\\n        if (gSaveContext.chronos.timer <= 0) {\\n            gSaveContext.chronos.isActive = 0;\\n            // Play deactivation sound\\n            Audio_PlaySfxGeneral(NA_SE_SY_GLASSMODE_OFF, &gSfxDefaultPos, 4, &gSfxDefaultFreqAndVolScale, &gSfxDefaultFreqAndVolScale, &gSfxDefaultReverb);\\n        }\\n    }\\n    \\n    // Update cooldown\\n    if (gSaveContext.chronos.cooldown > 0) {\\n        gSaveContext.chronos.cooldown--;\\n    }\\n}\\n\\n// Call this in Play_Update function\\nChronis_Update(play);\\n```\\n\\n**File: `oot/src/code/z_actor.c`**\\n\\nModify the Actor_UpdateVelocityXZGravity function around line 987:\\n```c\\nvoid Actor_UpdateVelocityXZGravity(Actor* actor) {\\n    f32 enemySpeedMultiplier = 1.0f;\\n    \\n    // Set current actor category for animation slow motion\\n    SkelAnime_SetCurrentActorCategory(actor->category);\\n    \\n    // Apply DRAMATIC slow motion to enemies and bosses when Chronos Magic is active\\n    if ((actor->category == ACTORCAT_ENEMY || actor->category == ACTORCAT_BOSS) && gSaveContext.chronos.isActive) {\\n        enemySpeedMultiplier = 0.1f; // Make enemies move at 10% speed when spell is active\\n    }\\n    \\n    actor->velocity.x = (actor->speed * enemySpeedMultiplier) * Math_SinS(actor->world.rot.y);\\n    actor->velocity.z = (actor->speed * enemySpeedMultiplier) * Math_CosS(actor->world.rot.y);\\n\\n    actor->velocity.y += actor->gravity;\\n\\n    if (actor->velocity.y < actor->minVelocityY) {\\n        actor->velocity.y = actor->minVelocityY;\\n    }\\n}\\n```\\n\\nModify the Actor_UpdateVelocityXYZ function around line 1019:\\n```c\\nvoid Actor_UpdateVelocityXYZ(Actor* actor) {\\n    f32 enemySpeedMultiplier = 1.0f;\\n    f32 speedXZ;\\n    \\n    // Set current actor category for animation slow motion\\n    SkelAnime_SetCurrentActorCategory(actor->category);\\n    \\n    // Apply DRAMATIC slow motion to enemies and bosses when Chronos Magic is active\\n    if ((actor->category == ACTORCAT_ENEMY || actor->category == ACTORCAT_BOSS) && gSaveContext.chronos.isActive) {\\n        enemySpeedMultiplier = 0.1f; // Make enemies move at 10% speed when spell is active\\n    }\\n    \\n    speedXZ = (actor->speed * enemySpeedMultiplier) * Math_CosS(actor->world.rot.x);\\n\\n    actor->velocity.x = speedXZ * Math_SinS(actor->world.rot.y);\\n    actor->velocity.y = (actor->speed * enemySpeedMultiplier) * Math_SinS(actor->world.rot.x);\\n    actor->velocity.z = speedXZ * Math_CosS(actor->world.rot.y);\\n}\\n```\\n\\n**File: `oot/src/code/z_skelanime.c`**\\n\\nAdd global variable and function (keep existing from previous mod):\\n```c\\n// Global variable to track current actor's category for slow motion\\nstatic u8 sCurrentActorCategory = ACTORCAT_PLAYER;\\n\\n// Function to set current actor category (called by movement functions)\\nvoid SkelAnime_SetCurrentActorCategory(u8 category) {\\n    sCurrentActorCategory = category;\\n}\\n```\\n\\nModify all animation functions to check Chronos Magic state:\\n```c\\n// In SkelAnime_LoopFull, SkelAnime_LoopPartial, SkelAnime_Once, LinkAnimation_Loop, LinkAnimation_Once\\nf32 animSpeedMultiplier = 1.0f;\\n\\n// Apply DRAMATIC slow motion to enemy animations when Chronos Magic is active\\nif ((sCurrentActorCategory == ACTORCAT_ENEMY || sCurrentActorCategory == ACTORCAT_BOSS) && gSaveContext.chronos.isActive) {\\n    animSpeedMultiplier = 0.1f; // Make enemy animations 10% speed when spell is active\\n}\\n```\\n\\n**File: `oot/src/overlays/misc/ovl_kaleido_scope/z_kaleido_item.c`**\\n\\nAdd Chronos Magic to the item selection (replace an existing magic spell or add new slot):\\n```c\\n// In the item handling, add Chronos Magic activation\\nif (gSaveContext.save.playerData.magic >= 48) {\\n    Interface_SetDoAction(play, DO_ACTION_MAGIC);\\n    if (gSaveContext.chronos.cooldown <= 0) {\\n        // Can use spell\\n        gKaleidoState->putAwayToDoAction = USE_ITEM_CHRONOS_MAGIC;\\n    } else {\\n        // On cooldown - show remaining time\\n        s16 cooldownSeconds = (gSaveContext.chronos.cooldown + 59) / 60;\\n        // Display cooldown message\\n    }\\n} else {\\n    Interface_SetDoAction(play, DO_ACTION_MAGIC_DISABLED);\\n}\\n```\\n\\n**File: `oot/src/code/z_message.c`**\\n\\nAdd status messages around line 1500:\\n```c\\n// Add these message cases\\ncase 0x8001: // Chronos Magic activated\\n    msgCtx->msgLength = sprintf(msgCtx->msgBuf, \\\"Time flows slowly around you!\\\");\\n    break;\\n    \\ncase 0x8002: // Chronos Magic on cooldown\\n    msgCtx->msgLength = sprintf(msgCtx->msgBuf, \\\"The spell is recharging... %d seconds\\\", (gSaveContext.chronos.cooldown + 59) / 60);\\n    break;\\n    \\ncase 0x8003: // Not enough magic\\n    msgCtx->msgLength = sprintf(msgCtx->msgBuf, \\\"Not enough magic power!\\\");\\n    break;\\n```\\n\\n**File: `oot/include/animation.h`**\\n\\nAdd the function declaration:\\n```c\\n// Function to set current actor category for slow motion (called by movement functions)\\nvoid SkelAnime_SetCurrentActorCategory(u8 category);\\n```\\n\\n**Explanation:**\\n- **New Magic Spell**: Creates 'Chronos Magic' similar to Nayru's Love but for time manipulation\\n- **Magic Cost**: 48 magic points (same as Nayru's Love)\\n- **Duration**: 10 seconds of effect\\n- **Cooldown**: 30 second cooldown between uses\\n- **Conditional Slow Motion**: Enemies only slow down when the spell is active\\n- **Visual/Audio Feedback**: Plays sounds on activation/deactivation\\n- **Status Tracking**: Saves spell state, timer, and cooldown\\n- **Strategic Gameplay**: Limited use encourages tactical timing\\n\\n**Spell Mechanics:**\\n- **Activation**: Assign to C-button like other magic spells\\n- **Effect**: All enemies and bosses move/animate at 10% speed\\n- **Duration**: 10 seconds (600 frames at 60fps)\\n- **Cost**: 48 magic points (nearly full magic meter)\\n- **Cooldown**: 30 seconds before can be used again\\n- **Targets**: Only `ACTORCAT_ENEMY` and `ACTORCAT_BOSS`\\n\\n**Usage Strategy:**\\n- Perfect for boss fights or overwhelming enemy encounters\\n- High magic cost prevents spam usage\\n- Cooldown adds strategic timing element\\n- Visual and audio cues for activation/deactivation\\n- Status messages inform player of availability\\n\\n**Integration:**\\n- Builds on the existing slow motion system\\n- Uses established magic spell framework\\n- Follows OoT's magic system conventions\\n- Compatible with existing save system\\n\\n**Rebuild Process:**\\n```bash\\nmake VERSION=ntsc-1.2 REGION=US COMPARE=0 -j32\\n```\\n\\n**What you'll experience:**\\n- New magic spell in inventory (activate with C-button)\\n- Dramatic slow motion effect on enemies when activated\\n- 10-second duration with visual/audio feedback\\n- Strategic resource management with magic cost and cooldown\\n- Perfect for tactical combat scenarios\\n\\nThis creates a powerful but limited-use spell that gives players tactical control over when to engage the slow motion effect, making combat encounters more strategic and exciting.\"}"}