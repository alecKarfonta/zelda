Type: feature_implementation
Quality Score: 8.5
Validation Notes: Low usefulness score. 
--------------------------------------------------
Instruction: Implement a custom actor that creates a damaging fire ring around the player when spawned, similar to Din's Fire but as a persistent effect that lasts 5 seconds",
    
    "input": null,
    
    "output": "Here's how to implement a FireRingEffect actor:

```c
typedef struct {
    Actor base;
    s16 timer;
    f32 radius;
    ColliderCylinder collider;
} FireRingActor;

void FireRing_Init(FireRingActor* this, PlayState* play) {
    Actor_SetScale(&this->base, 0.01f);
    this->timer = 300; // 5 seconds at 60fps
    this->radius = 100.0f;
    
    // Initialize cylinder collider
    Collider_InitCylinder(play, &this->collider);
    Collider_SetCylinder(play, &this->collider, &this->base, &sCylinderInit);
    this->collider.dim.radius = this->radius;
    this->collider.dim.height = 40;
    this->collider.info.toucher.damage = 4;
}

void FireRing_Update(FireRingActor* this, PlayState* play) {
    Actor* player = GET_PLAYER(play);
    
    // Follow player position
    this->base.world.pos = player->world.pos;
    
    // Update collider position
    Collider_UpdateCylinder(&this->base, &this->collider);
    
    // Check collisions with enemies
    CollisionCheck_SetAT(play, &play->colChkCtx, &this->collider.base);
    
    // Particle effects
    for(int i = 0; i < 8; i++) {
        f32 angle = (i * M_PI) / 4.0f;
        Vec3f pos = {
            this->base.world.pos.x + sinf(angle) * this->radius,
            this->base.world.pos.y,
            this->base.world.pos.z + cosf(angle) * this->radius
        };
        EffectSsEnFire_SpawnVec3f(play, &this->base, &pos, 50, 0, 0, -1);
    }
    
    // Delete after timer expires
    if(--this->timer <= 0) {
        Actor_Kill(&this->base);
    }
}

void FireRing_Draw(FireRingActor* this, PlayState* play) {
    // No model to draw, effects only
}

const ActorInit FireRing_InitVars = {
    ACTOR_FIRE_RING,
    ACTORCAT_ITEMACTION,
    FLAGS_NONE,
    OBJECT_GAMEPLAY_KEEP,
    sizeof(FireRingActor),
    (ActorFunc)FireRing_Init,
    (ActorFunc)FireRing_Update,
    (ActorFunc)FireRing_Draw,
    NULL
};
```",

    "technical_notes": "- Uses cylinder collider for damage detection
- Properly handles memory allocation via ActorInit size
- Integrates with particle system using EffectSsEnFire
- Follows player using GET_PLAYER macro
- Cleans up resources on actor death
- Maintains 60fps compatibility with timer values
- Uses gameplay_keep object to avoid loading custom assets
Output:
Here's how to implement a FireRingEffect actor:

```c
typedef struct {
    Actor base;
    s16 timer;
    f32 radius;
    ColliderCylinder collider;
} FireRingActor;

void FireRing_Init(FireRingActor* this, PlayState* play) {
    Actor_SetScale(&this->base, 0.01f);
    this->timer = 300; // 5 seconds at 60fps
    this->radius = 100.0f;
    
    // Initialize cylinder collider
    Collider_InitCylinder(play, &this->collider);
    Collider_SetCylinder(play, &this->collider, &this->base, &sCylinderInit);
    this->collider.dim.radius = this->radius;
    this->collider.dim.height = 40;
    this->collider.info.toucher.damage = 4;
}

void FireRing_Update(FireRingActor* this, PlayState* play) {
    Actor* player = GET_PLAYER(play);
    
    // Follow player position
    this->base.world.pos = player->world.pos;
    
    // Update collider position
    Collider_UpdateCylinder(&this->base, &this->collider);
    
    // Check collisions with enemies
    CollisionCheck_SetAT(play, &play->colChkCtx, &this->collider.base);
    
    // Particle effects
    for(int i = 0; i < 8; i++) {
        f32 angle = (i * M_PI) / 4.0f;
        Vec3f pos = {
            this->base.world.pos.x + sinf(angle) * this->radius,
            this->base.world.pos.y,
            this->base.world.pos.z + cosf(angle) * this->radius
        };
        EffectSsEnFire_SpawnVec3f(play, &this->base, &pos, 50, 0, 0, -1);
    }
    
    // Delete after timer expires
    if(--this->timer <= 0) {
        Actor_Kill(&this->base);
    }
}

void FireRing_Draw(FireRingActor* this, PlayState* play) {
    // No model to draw, effects only
}

const ActorInit FireRing_InitVars = {
    ACTOR_FIRE_RING,
    ACTORCAT_ITEMACTION,
    FLAGS_NONE,
    OBJECT_GAMEPLAY_KEEP,
    sizeof(FireRingActor),
    (ActorFunc)FireRing_Init,
    (ActorFunc)FireRing_Update,
    (ActorFunc)FireRing_Draw,
    NULL
};
```",

    "technical_notes": "- Uses cylinder collider for damage detection
- Properly handles memory allocation via ActorInit size
- Integrates with particle system using EffectSsEnFire
- Follows player using GET_PLAYER macro
- Cleans up resources on actor death
- Maintains 60fps compatibility with timer values
- Uses gameplay_keep object to avoid loading custom assets
