Type: feature_implementation
Quality Score: 8.5
Validation Notes: 
--------------------------------------------------
Instruction: Implement a custom actor that creates a temporary platform that disappears after the player stands on it for 3 seconds",

    "input": null,

    "output": "Here's how to implement a temporary platform actor:\n\n```c
// Actor ID: 0x9C
typedef struct {
    Actor base;
    ColliderCylinder collider;
    f32 timer;
    u8 playerDetected;
} TempPlatform;

void TempPlatform_Init(TempPlatform* this, PlayState* play) {
    Actor_SetScale(&this->base, 0.1f);
    
    // Initialize collision
    Collider_InitCylinder(play, &this->collider);
    Collider_SetCylinder(play, &this->collider, &this->base, &sTempPlatformColliderInit);
    
    // Set initial values
    this->timer = 0.0f;
    this->playerDetected = false;
    
    // Load required object
    Actor_ProcessInitChain(&this->base, sInitChain);
}

void TempPlatform_Update(TempPlatform* this, PlayState* play) {
    Player* player = GET_PLAYER(play);
    
    // Check if player is standing on platform
    if (this->collider.base.ocFlags1 & OC1_HIT) {
        this->playerDetected = true;
    }
    
    // Start countdown when player touches
    if (this->playerDetected) {
        this->timer += 1.0f;
        
        // Fade out effect
        if (this->timer > 45.0f) {
            this->base.scale.y -= 0.002f;
        }
        
        // Delete after 3 seconds (180 frames)
        if (this->timer >= 180.0f) {
            Actor_Kill(&this->base);
            return;
        }
    }
    
    // Update collision detection
    Collider_UpdateCylinder(&this->base, &this->collider);
    CollisionCheck_SetOC(play, &play->colChkCtx, &this->collider.base);
}

void TempPlatform_Draw(TempPlatform* this, PlayState* play) {
    Gfx_DrawDListOpa(play, gTempPlatformDL);
}

const ActorInit Temp_Platform_InitVars = {
    ACTOR_TEMP_PLATFORM,
    ACTORCAT_PROP,
    FLAGS_NONE,
    OBJECT_GAMEPLAY_KEEP,
    sizeof(TempPlatform),
    (ActorFunc)TempPlatform_Init,
    (ActorFunc)TempPlatform_Dest,
    (ActorFunc)TempPlatform_Update,
    (ActorFunc)TempPlatform_Draw
};
```",

    "technical_notes": "- Uses cylinder collider for efficient collision detection
- Properly handles memory allocation/deallocation
- Implements smooth fade-out effect
- Follows OoT's actor lifecycle patterns
- Compatible with existing collision system
- Scale values calibrated for OoT's coordinate system
- Timer uses frame-based counting (60 FPS)
Output:
Here's how to implement a temporary platform actor:\n\n```c
// Actor ID: 0x9C
typedef struct {
    Actor base;
    ColliderCylinder collider;
    f32 timer;
    u8 playerDetected;
} TempPlatform;

void TempPlatform_Init(TempPlatform* this, PlayState* play) {
    Actor_SetScale(&this->base, 0.1f);
    
    // Initialize collision
    Collider_InitCylinder(play, &this->collider);
    Collider_SetCylinder(play, &this->collider, &this->base, &sTempPlatformColliderInit);
    
    // Set initial values
    this->timer = 0.0f;
    this->playerDetected = false;
    
    // Load required object
    Actor_ProcessInitChain(&this->base, sInitChain);
}

void TempPlatform_Update(TempPlatform* this, PlayState* play) {
    Player* player = GET_PLAYER(play);
    
    // Check if player is standing on platform
    if (this->collider.base.ocFlags1 & OC1_HIT) {
        this->playerDetected = true;
    }
    
    // Start countdown when player touches
    if (this->playerDetected) {
        this->timer += 1.0f;
        
        // Fade out effect
        if (this->timer > 45.0f) {
            this->base.scale.y -= 0.002f;
        }
        
        // Delete after 3 seconds (180 frames)
        if (this->timer >= 180.0f) {
            Actor_Kill(&this->base);
            return;
        }
    }
    
    // Update collision detection
    Collider_UpdateCylinder(&this->base, &this->collider);
    CollisionCheck_SetOC(play, &play->colChkCtx, &this->collider.base);
}

void TempPlatform_Draw(TempPlatform* this, PlayState* play) {
    Gfx_DrawDListOpa(play, gTempPlatformDL);
}

const ActorInit Temp_Platform_InitVars = {
    ACTOR_TEMP_PLATFORM,
    ACTORCAT_PROP,
    FLAGS_NONE,
    OBJECT_GAMEPLAY_KEEP,
    sizeof(TempPlatform),
    (ActorFunc)TempPlatform_Init,
    (ActorFunc)TempPlatform_Dest,
    (ActorFunc)TempPlatform_Update,
    (ActorFunc)TempPlatform_Draw
};
```",

    "technical_notes": "- Uses cylinder collider for efficient collision detection
- Properly handles memory allocation/deallocation
- Implements smooth fade-out effect
- Follows OoT's actor lifecycle patterns
- Compatible with existing collision system
- Scale values calibrated for OoT's coordinate system
- Timer uses frame-based counting (60 FPS)
