{"instruction": "I need help creating a hostile lava beast enemy called En_LavaBeast for my OoT romhack. It should adapt to the player's combat style by observing which attacks are most successful against it, and change its behavior to counter them. It should also have lava particle effects and heat damage when near the player. Can you help me implement this with proper collision, state management, and behavioral adaptation?", "output": "```c\n#include \"z_en_lavabeast.h\"\n#include \"overlays/actors/ovl_En_LavaBeast/z_en_lavabeast.h\"\n#include \"assets/objects/object_lavabeast/object_lavabeast.h\"\n\n#define LAVABEAST_DAMAGE_NORMAL 2\n#define LAVABEAST_HEAT_DAMAGE 1\n#define LAVABEAST_DETECTION_RANGE 300.0f\n#define LAVABEAST_ATTACK_RANGE 100.0f\n\ntypedef enum {\n    /* 0x00 */ LAVABEAST_STATE_IDLE,\n    /* 0x01 */ LAVABEAST_STATE_CHASE,\n    /* 0x02 */ LAVABEAST_STATE_ATTACK_MELEE,\n    /* 0x03 */ LAVABEAST_STATE_ATTACK_RANGED,\n    /* 0x04 */ LAVABEAST_STATE_DAMAGED,\n    /* 0x05 */ LAVABEAST_STATE_DEATH\n} LavaBeastState;\n\ntypedef struct {\n    /* 0x0000 */ Actor actor;\n    /* 0x014C */ s16 timer;\n    /* 0x014E */ s16 actionState;\n    /* 0x0150 */ s16 health;\n    /* 0x0152 */ s16 invincibilityTimer;\n    /* 0x0154 */ s16 adaptiveDefense;\n    /* 0x0156 */ s16 meleeDamageTaken;\n    /* 0x0158 */ s16 rangedDamageTaken;\n    /* 0x015A */ s16 effectTimer;\n    /* 0x015C */ f32 speed;\n    /* 0x0160 */ Vec3f homePos;\n    /* 0x016C */ ColliderCylinder bodyCollider;\n    /* 0x01B8 */ ColliderCylinder attackCollider;\n} EnLavaBeast; // size = 0x0204\n\nstatic ColliderCylinderInit sCylinderInit = {\n    {\n        COLTYPE_HIT6,\n        AT_ON | AT_TYPE_ENEMY,\n        AC_ON | AC_TYPE_PLAYER,\n        OC1_ON | OC1_TYPE_ALL,\n        OC2_TYPE_1,\n        COLSHAPE_CYLINDER,\n    },\n    {\n        ELEMTYPE_UNK0,\n        { 0xFFCFFFFF, 0x04, 0x08 },\n        { 0xFFCFFFFF, 0x00, 0x00 },\n        TOUCH_ON | TOUCH_SFX_HARD,\n        BUMP_ON,\n        OCELEM_ON,\n    },\n    { 25, 70, 0, { 0, 0, 0 } },\n};\n\nvoid EnLavaBeast_Init(Actor* thisx, PlayState* play) {\n    EnLavaBeast* this = (EnLavaBeast*)thisx;\n    \n    Actor_SetScale(&this->actor, 0.015f);\n    \n    this->actor.colChkInfo.mass = 200;\n    this->actor.colChkInfo.health = 8;\n    this->actor.gravity = -1.0f;\n    this->speed = 3.0f;\n    \n    Collider_InitCylinder(play, &this->bodyCollider);\n    Collider_SetCylinder(play, &this->bodyCollider, &this->actor, &sCylinderInit);\n    \n    Collider_InitCylinder(play, &this->attackCollider);\n    Collider_SetCylinder(play, &this->attackCollider, &this->actor, &sCylinderInit);\n    \n    this->actionState = LAVABEAST_STATE_IDLE;\n    this->health = this->actor.colChkInfo.health;\n    Math_Vec3f_Copy(&this->homePos, &this->actor.world.pos);\n    \n    this->adaptiveDefense = 0;\n    this->meleeDamageTaken = 0;\n    this->rangedDamageTaken = 0;\n}\n\nvoid EnLavaBeast_Destroy(Actor* thisx, PlayState* play) {\n    EnLavaBeast* this = (EnLavaBeast*)thisx;\n    \n    Collider_DestroyCylinder(play, &this->bodyCollider);\n    Collider_DestroyCylinder(play, &this->attackCollider);\n}\n\nvoid EnLavaBeast_UpdateAdaptiveBehavior(EnLavaBeast* this) {\n    if (this->meleeDamageTaken > this->rangedDamageTaken) {\n        // Player uses more melee attacks - adapt to be stronger against melee\n        this->adaptiveDefense = 1;\n    } else if (this->rangedDamageTaken > this->meleeDamageTaken) {\n        // Player uses more ranged attacks - adapt to be stronger against ranged\n        this->adaptiveDefense = 2;\n    }\n}\n\nvoid EnLavaBeast_Update(Actor* thisx, PlayState* play) {\n    EnLavaBeast* this = (EnLavaBeast*)thisx;\n    Player* player = GET_PLAYER(play);\n    f32 distToPlayer = Actor_WorldDistXZToActor(&this->actor, &player->actor);\n    \n    if (this->invincibilityTimer > 0) {\n        this->invincibilityTimer--;\n    }\n    \n    // Handle damage\n    if (this->bodyCollider.base.acFlags & AC_HIT) {\n        this->bodyCollider.base.acFlags &= ~AC_HIT;\n        \n        if (this->invincibilityTimer == 0) {\n            s16 damage = Actor_ApplyDamage(&this->actor);\n            \n            // Track damage type for adaptation\n            if (this->bodyCollider.info.toucher.dmgFlags & DMG_SWORD) {\n                this->meleeDamageTaken++;\n            } else {\n                this->rangedDamageTaken++;\n            }\n            \n            EnLavaBeast_UpdateAdaptiveBehavior(this);\n            \n            if (this->actor.colChkInfo.health == 0) {\n                this->actionState = LAVABEAST_STATE_DEATH;\n                Enemy_StartFinishingBlow(play, &this->actor);\n            } else {\n                this->actionState = LAVABEAST_STATE_DAMAGED;\n                this->invincibilityTimer = 20;\n            }\n        }\n    }\n    \n    // State machine\n    switch (this->actionState) {\n        case LAVABEAST_STATE_IDLE:\n            if (distToPlayer < LAVABEAST_DETECTION_RANGE) {\n                this->actionState = LAVABEAST_STATE_CHASE;\n            }\n            break;\n            \n        case LAVABEAST_STATE_CHASE:\n            Math_SmoothStepToS(&this->actor.shape.rot.y, \n                Math_Vec3f_Yaw(&this->actor.world.pos, &player->actor.world.pos), 6, 2000, 0);\n            this->actor.world.rot.y = this->actor.shape.rot.y;\n            \n            if (distToPlayer < LAVABEAST_ATTACK_RANGE) {\n                this->actionState = LAVABEAST_STATE_ATTACK_MELEE;\n                this->timer = 30;\n            }\n            break;\n            \n        case LAVABEAST_STATE_DEATH:\n            if (this->timer++ > 30) {\n                Actor_Kill(&this->actor);\n                return;\n            }\n            break;\n    }\n    \n    // Spawn heat damage area when close\n    if (distToPlayer < 80.0f && (play->gameplayFrames & 0xF) == 0) {\n        if (!Player_HasMirrorShieldEquipped(play)) {\n            Player_InflictDamage(play, LAVABEAST_HEAT_DAMAGE);\n        }\n    }\n    \n    // Update colliders\n    Collider_UpdateCylinder(&this->actor, &this->bodyCollider);\n    CollisionCheck_SetAC(play, &play->colChkCtx, &this->bodyCollider.base);\n    CollisionCheck_SetOC(play, &play->colChkCtx, &this->bodyCollider.base);\n    \n    // Ground physics\n    Actor_UpdateBgCheckInfo(play, &this->actor, 20.0f, 30.0f, 30.0f, \n        UPDBGCHECKINFO_FLAG_0 | UPDBGCHECKINFO_FLAG_2);\n}\n\nvoid EnLavaBeast_Draw(Actor* thisx, PlayState* play) {\n    EnLavaBeast* this = (EnLavaBeast*)thisx;\n    \n    // Draw main model\n    func_8002EBCC(&this->actor, play, 0);\n    \n    // Spawn lava particles\n    if ((play->gameplayFrames & 0x3) == 0) {\n        Vec3f particlePos = this->actor.world.pos;\n        particlePos.y += 40.0f;\n        \n        EffectSsEnFire_SpawnVec3f(play, &this->actor, &particlePos, 50, 0, 0, -1);\n    }\n}\n\nconst ActorProfile En_LavaBeast_InitVars = {\n    ACTOR_EN_LAVABEAST,\n    ACTORCAT_ENEMY,\n    FLAGS,\n    OBJECT_LAVABEAST,\n    sizeof(EnLavaBeast),\n    (ActorFunc)EnLavaBeast_Init,\n    (ActorFunc)EnLavaBeast_Destroy,\n    (ActorFunc)EnLavaBeast_Update,\n    (ActorFunc)EnLavaBeast_Draw\n};\n```"}
